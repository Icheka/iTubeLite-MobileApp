{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/icheka/Work/Personal Projects/React Native/iTubeLite-MobileApp/screens/Signup.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { GS } from \"../styles/global\";\nimport { FontAwesome5, MaterialIcons, Feather } from '@expo/vector-icons';\nimport BlockButton from \"../components/BlockButton\";\nimport FontText from \"../components/FontText\";\nimport User from \"../classes/User\";\n\nvar Signup = function (_Component) {\n  _inherits(Signup, _Component);\n\n  var _super = _createSuper(Signup);\n\n  function Signup(props) {\n    var _this;\n\n    _classCallCheck(this, Signup);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      full_name: '',\n      email: '',\n      password: '',\n      c_password: ''\n    };\n    return _this;\n  }\n\n  _createClass(Signup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var width = Dimensions.get(\"window\").width;\n      var height = Dimensions.get(\"window\").height;\n      return React.createElement(TouchableWithoutFeedback, {\n        onPress: function onPress() {\n          return Keyboard.dismiss();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: GS.signup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }\n      }, React.createElement(ImageBackground, {\n        source: require(\"../assets/signupscreen.jpg\"),\n        style: _objectSpread(_objectSpread({}, GS.imageBgItemsCentered), {}, {\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: 'rgba(255,255,255,1)'\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }\n      }, React.createElement(View, {\n        style: {\n          marginTop: -height / 10,\n          marginBottom: 30\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }\n      }, React.createElement(FontText, {\n        style: {\n          color: 'white',\n          fontSize: 35,\n          fontStyle: 'underline'\n        },\n        font: \"DancingScriptRegular\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 29\n        }\n      }, \"iTube Lite\")), React.createElement(View, {\n        style: GS.inputGroupInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }\n      }, React.createElement(FontAwesome5, {\n        name: \"user\",\n        size: 24,\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }\n      }), React.createElement(TextInput, {\n        style: GS.inputWithIcon,\n        onChangeText: function onChangeText(v) {\n          return _this2.setState({\n            full_name: v\n          });\n        },\n        placeholder: \"Name\",\n        placeholderTextColor: \"white\",\n        autoCompleteType: \"name\",\n        returnKeyLabel: \"Dismiss Keyboard\",\n        returnKeyType: \"done\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }\n      })), React.createElement(View, {\n        style: GS.inputGroupInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }\n      }, React.createElement(MaterialIcons, {\n        name: \"email\",\n        size: 24,\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }\n      }), React.createElement(TextInput, {\n        style: GS.inputWithIcon,\n        onChangeText: function onChangeText(v) {\n          return _this2.setState({\n            email: v\n          });\n        },\n        placeholder: \"Email Address\",\n        placeholderTextColor: \"white\",\n        autoCompleteType: \"email\",\n        keyboardType: \"email-address\",\n        returnKeyLabel: \"Dismiss Keyboard\",\n        returnKeyType: \"done\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }\n      })), React.createElement(View, {\n        style: GS.inputGroupInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }\n      }, React.createElement(MaterialIcons, {\n        name: \"lock\",\n        size: 24,\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }\n      }), React.createElement(TextInput, {\n        style: GS.inputWithIcon,\n        onChangeText: function onChangeText(v) {\n          return _this2.setState({\n            password: v\n          });\n        },\n        placeholder: \"Password\",\n        placeholderTextColor: \"white\",\n        autoCompleteType: \"password\",\n        returnKeyLabel: \"Dismiss Keyboard\",\n        returnKeyType: \"done\",\n        secureTextEntry: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 29\n        }\n      })), React.createElement(Text, {\n        style: {\n          color: 'white',\n          fontSize: 17,\n          textAlign: 'right',\n          width: width - 90,\n          marginBottom: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }\n      }, \"Min: 6\"), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }\n      }, React.createElement(BlockButton, {\n        title: \"Register\",\n        onpress: function onpress() {\n          return _this2.createUser();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }\n      })), React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'center',\n          marginTop: 20,\n          backgroundColor: 'rgba(0,0,0,0.27)',\n          paddingHorizontal: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: 'white',\n          fontSize: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }\n      }, \"Already have an account?\"), React.createElement(Button, {\n        title: \"Sign In\",\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate(\"Login\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 29\n        }\n      })))));\n    }\n  }, {\n    key: \"createUser\",\n    value: function createUser() {\n      var _this3 = this;\n\n      this.state.c_password = this.state.password;\n\n      if (this.state.password != this.state.c_password) {\n        this.createAlert(\"Error\", \"Passwords do not match!\", [{\n          text: \"Dismiss\",\n          style: \"destructive\"\n        }]);\n        return;\n      } else if (this.state.password.length < 6) {\n        this.createAlert(\"Error\", \"Password cannot be less than 6 characters long!\", [{\n          text: \"Dismiss\",\n          style: \"destructive\"\n        }]);\n        return;\n      }\n\n      var user = new User();\n      var payload = {\n        'full_name': this.state.full_name,\n        'email': this.state.email,\n        'password': this.state.password\n      };\n      user.createUser(payload);\n      setTimeout(function () {\n        if (user.data.header == \"Success\") {\n          _this3.createAlert(\"Success\", \"Your iTube Lite account was created successfully!\");\n        } else {\n          _this3.createAlert(\"Error\", user.data.data);\n        }\n      }, 5000);\n    }\n  }, {\n    key: \"createAlert\",\n    value: function createAlert(title, body, buttons) {\n      Alert.alert(title, body, buttons);\n    }\n  }, {\n    key: \"charsLeft\",\n    value: function charsLeft(param, max) {\n      if (max - param > -1) {\n        return \"Left: \" + (max - param);\n      } else {\n        return \"OK\";\n      }\n    }\n  }]);\n\n  return Signup;\n}(Component);\n\nexport { Signup as default };","map":{"version":3,"sources":["/home/icheka/Work/Personal Projects/React Native/iTubeLite-MobileApp/screens/Signup.jsx"],"names":["React","Component","GS","FontAwesome5","MaterialIcons","Feather","BlockButton","FontText","User","Signup","props","state","full_name","email","password","c_password","width","Dimensions","get","height","Keyboard","dismiss","signup","require","imageBgItemsCentered","flexDirection","justifyContent","alignItems","backgroundColor","marginTop","marginBottom","color","fontSize","fontStyle","inputGroupInput","inputWithIcon","v","setState","textAlign","createUser","paddingHorizontal","navigation","navigate","createAlert","text","style","length","user","payload","setTimeout","data","header","title","body","buttons","Alert","alert","param","max"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    View, Text, ImageBackground, Dimensions,\n    TextInput, Button, Keyboard, TouchableWithoutFeedback,\n    Alert, ScrollView\n} from 'react-native';\nimport { GS } from '../styles/global';\nimport { FontAwesome5, MaterialIcons, Feather } from '@expo/vector-icons';\nimport BlockButton from '../components/BlockButton';\nimport FontText from '../components/FontText';\n\nimport User from '../classes/User';\n\nexport default class Signup extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            full_name: '',\n            email: '',\n            password: '',\n            c_password: ''\n        }\n    }\n\n    render() {\n        let width = Dimensions.get(\"window\").width;\n        let height = Dimensions.get(\"window\").height;\n\n        return (\n            <TouchableWithoutFeedback onPress={ () => Keyboard.dismiss() }>\n                <View style={ GS.signup }>\n                    <ImageBackground\n                        source={ require(\"../assets/signupscreen.jpg\") }\n                        style={{\n                            ...GS.imageBgItemsCentered,\n                            flexDirection: 'column',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            backgroundColor: 'rgba(255,255,255,1)'\n                        }}\n                    >\n                        <View style={{\n                            marginTop: -height/10,\n                            marginBottom: 30,\n                        }}>\n                            <FontText\n                                style={{\n                                    color: 'white',\n                                    fontSize: 35,\n                                    fontStyle: 'underline',\n                                    }}\n                                font=\"DancingScriptRegular\"\n                            >\n                            iTube Lite\n                            </FontText>\n                        </View>\n                        <View style={ GS.inputGroupInput }>\n                            <FontAwesome5 \n                                name=\"user\"\n                                size={24}\n                                color=\"white\"\n                            />\n                            <TextInput\n                                style={ GS.inputWithIcon }\n                                onChangeText={ v => this.setState({ full_name: v }) }\n                                placeholder=\"Name\"\n                                placeholderTextColor=\"white\"\n                                autoCompleteType='name'\n                                returnKeyLabel=\"Dismiss Keyboard\"\n                                returnKeyType=\"done\"\n                            />\n                        </View>\n                        <View style={ GS.inputGroupInput }>\n                            <MaterialIcons \n                                name=\"email\"\n                                size={24}\n                                color=\"white\"\n                            />\n                            <TextInput\n                                style={ GS.inputWithIcon }\n                                onChangeText={ v => this.setState({ email: v }) }\n                                placeholder=\"Email Address\"\n                                placeholderTextColor=\"white\"\n                                autoCompleteType=\"email\"\n                                keyboardType=\"email-address\"\n                                returnKeyLabel=\"Dismiss Keyboard\"\n                                returnKeyType=\"done\"\n                            />\n                        </View>\n                        <View style={ GS.inputGroupInput }>\n                            <MaterialIcons \n                                name=\"lock\"\n                                size={24}\n                                color=\"white\"\n                            />\n                            <TextInput\n                                style={ GS.inputWithIcon }\n                                onChangeText={ v => this.setState({ password: v }) }\n                                placeholder=\"Password\"\n                                placeholderTextColor=\"white\"\n                                autoCompleteType=\"password\"\n                                returnKeyLabel=\"Dismiss Keyboard\"\n                                returnKeyType=\"done\"\n                                secureTextEntry={true}\n                            />\n                        </View>\n                        <Text\n                            style={{\n                                color: 'white',\n                                fontSize: 17,\n                                textAlign: 'right',\n                                width: width - 90,\n                                marginBottom: 10\n                            }}\n                        >\n                        {/* this.charsLeft(this.state.password.length, 6) */}\n                        Min: 6\n                        </Text>\n                        {/* <View style={ GS.inputGroupInput }>\n                            <MaterialIcons \n                                name=\"lock\"\n                                size={24}\n                                color=\"white\"\n                            />\n                            <TextInput\n                                style={ GS.inputWithIcon }\n                                onChangeText={ v => this.setState({ c_password: v }) }\n                                placeholder=\"Confirm Password\"\n                                placeholderTextColor=\"white\"\n                            />\n                        </View> */}\n                        <View>\n                            <BlockButton\n                                title=\"Register\"\n                                onpress={ () => this.createUser() }\n                            />\n                        </View>\n                        <View style={{\n                            flexDirection: 'row',\n                            alignItems: 'center',\n                            marginTop: 20,\n                            backgroundColor: 'rgba(0,0,0,0.27)',\n                            paddingHorizontal: 10\n                        }}>\n                            <Text\n                                style={{ color: 'white', fontSize: 20 }}\n                            >\n                                Already have an account?\n                            </Text>\n                            <Button\n                                title=\"Sign In\"\n                                onPress={ () => this.props.navigation.navigate(\"Login\") }\n                            />\n                        </View>\n                    </ImageBackground>\n                </View>\n            </TouchableWithoutFeedback>\n        )\n    }\n\n    createUser() {\n        this.state.c_password = this.state.password;\n        if (this.state.password != this.state.c_password) {\n            this.createAlert(\n                \"Error\",\n                \"Passwords do not match!\",\n                [{\n                    text: \"Dismiss\",\n                    style: \"destructive\"\n                }]\n            );\n            return;\n        } else if (this.state.password.length < 6) {\n            this.createAlert(\n                \"Error\",\n                \"Password cannot be less than 6 characters long!\",\n                [{\n                    text: \"Dismiss\",\n                    style: \"destructive\"\n                }]\n            );\n            return;\n        }\n\n        const user = new User();\n        const payload = {\n            'full_name': this.state.full_name,\n            'email': this.state.email,\n            'password': this.state.password,\n        }\n        user.createUser(payload);\n        setTimeout(() => {\n            if (user.data.header == \"Success\") {\n                this.createAlert(\n                    \"Success\",\n                    \"Your iTube Lite account was created successfully!\"\n                );\n                // persist data\n                // redirect to 'choose categories' screen\n            } else {\n                this.createAlert(\n                    \"Error\",\n                    user.data.data\n                );\n            }\n        }, 5000);\n    }\n\n    createAlert(title, body, buttons) {\n        Alert.alert(\n            title,\n            body,\n            buttons\n        );\n    }\n\n    charsLeft(param, max) {\n        if ((max - param) > -1) {\n            return (\n                \"Left: \" + (max - param)\n            );\n        } else {\n            return (\n                \"OK\"\n            );\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}